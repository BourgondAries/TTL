////////////////////////////////////////////////////////////
//
// TTL - Tea Tank Library
// Copyright (C) 2013 Kevin R. Stravers (macocio@gmail.com)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Timestamp/Timestamp.hpp>


namespace ttl
{

    ////////////////////////////////////////////////////////////
    std::string getTimeStamp()
    {
        typedef std::chrono::system_clock chrsc;
        typedef std::chrono::time_point<chrsc> chrtp;

        chrtp now = std::chrono::system_clock::now();
        chrtp epoch;

        auto duration = std::chrono::duration_cast<std::chrono::nanoseconds>(now - epoch).count();

        std::time_t time = std::chrono::system_clock::to_time_t(now);

        duration %= 1000000000;
        std::string str(std::ctime(&time));

        std::string::iterator it = --str.end();
        for (; it != str.begin(); --it)
        {
            if (*it == ' ')
            {
                break;
            }
        }

        // Make sure duration has enough prefix 0:
        std::string duration_str = std::move(std::to_string(duration));
        while (duration_str.size() < 9)
            duration_str.insert(duration_str.begin(), '0');

        std::string dur = "." + duration_str;
        str.insert(it, dur.begin(), dur.end());
        str.erase(--str.end());

        return str;
    }

} // Namespace ttl
