////////////////////////////////////////////////////////////
//
// TTL - Tea Tank Library
// Copyright (C) 2013 Kevin R. Stravers (macocio@gmail.com)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Runnable/Runnable.hpp"
#include "Logger/Logger.hpp"


namespace ttl
{

    ////////////////////////////////////////////////////////////
    void Runnable::cycle(std::unique_ptr<Runnable> runnable)
    {
        try
        {
            Logger<true> system_log("system.log", true, std::ios::trunc | std::ios::out);

            do
            {
                try
                {
                    if (runnable)
                    {
                        std::size_t cycle_count = 0;
                        Runnable *holder;
                        system_log << Timestamp << "Created temporary\n";

                        do
                        {
                            if (cycle_count == std::numeric_limits<std::size_t>::max())
                            {
                                cycle_count = 0;
                                system_log << Timestamp << "Cycle count resetted\n";
                            }
                            system_log << Timestamp << "Entering cycle " << ++cycle_count << "\n";
                            system_log << Timestamp << "Pointer valid, calling run()\n";
                            holder = runnable->run();
                            system_log << Timestamp << "Returned from run()\n";
                            if (holder == runnable.get())
                            {
                                system_log << Timestamp << "this returned, recalling run()\n";
                                continue;
                            }
                            runnable.reset(holder);
                            system_log << Timestamp << "Resetted, checking validity\n";
                        }
                        while (runnable);
                        system_log << Timestamp << "Pointer invalidated, returning\n";
                    }
                    else
                    {
                        system_log << Timestamp << "Pointer invalid, returning\n";
                    }
                }
                catch (Runnable *r)
                {
                    system_log << Timestamp << "An object of ttl::Runnable was caught\n";
                    runnable.reset(r);
                }
                catch (std::exception &e)
                {
                    system_log << Timestamp << "An object of std::exception was caught:\n\twhat(): " << e.what() << "\n";
                    runnable.reset(nullptr);
                }
                catch (...)
                {
                    system_log << Timestamp << "An unknown exception was caught\n";
                    runnable.reset(nullptr);
                }
            } while (runnable);
        }
        catch (std::exception &e)
        {
            std::cerr << getTimeStamp() << "The logger failed to initialize\n\twhat(): " << e.what() << "\n";
        }
        catch (...)
        {
            std::cerr << getTimeStamp() << "The logger failed to initialize due to an unknown exception\n";
        }
    }

} // Namespace ttl
