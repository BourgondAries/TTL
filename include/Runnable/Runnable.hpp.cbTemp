////////////////////////////////////////////////////////////
//
// TTL - Tea Tank Library
// Copyright (C) 2013 Kevin R. Stravers (macocio@gmail.com)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////

#ifndef RUNNABLE_HPP_INCLUDED
#define RUNNABLE_HPP_INCLUDED

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <memory>


namespace ttl
{

    ////////////////////////////////////////////////////////////
    /// \brief Class for managing cycles of runnable objects
    ///
    /// Inheriting from this class and overriding its run function
    /// will allow you to send such class into ttl::Runnable::cycle
    ///
    ////////////////////////////////////////////////////////////
    class Runnable
    {
    public:

        Runnable() = default;
        virtual ~Runnable() = default;

        virtual Runnable *run() = 0;

        ////////////////////////////////////////////////////////////
        /// \brief Handles exceptions and logs times.
        ///
        ////////////////////////////////////////////////////////////
        static void cycle(std::unique_ptr<Runnable> runnable);
    };

} // Namespace ttl

#endif // RUNNABLE_HPP_INCLUDED
